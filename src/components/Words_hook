import React, { useState, useEffect } from 'react';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import Typography from '@material-ui/core/Typography';
import { withStyles } from '@material-ui/core/styles';
import Grid from '@material-ui/core/Grid';
import Button from '@material-ui/core/Button';
import Fab from '@material-ui/core/Fab';
import AddIcon from '@material-ui/icons/Add';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';
import TextField from '@material-ui/core/TextField';


const databaseURL = "https://word-cloud-fc33b.firebaseio.com";

const Words = () =>  {
   
    const [words, setWords] = useState({});
    const [dialog, setDialog] = useState(false);
    const [word, setWord] = useState("");
    const [weight, setWeight] = useState("");
        
    

    const _get = () => {
        fetch(`${databaseURL}/words.json`).then(res => {
            if(res.status != 200) {
                throw new Error(res.statusText);
            }
            return res.json();
        }).then(words => setWords(words));
    }

    const _post = (word) => {
        return fetch(`${databaseURL}/words.json`, {
            method: 'POST',
            body: JSON.stringify(word)
        }).then(res => {
            if(res.status != 200) {
                throw new Error(res.statusText);
            }
            return res.json();
        }).then(data => {
            let nextState = words;
            nextState[data.name] = word;
            setWords(nextState);
        });
    }

    const _delete = (id) => {
        return fetch(`${databaseURL}/words/${id}.json`, {
            method: 'DELETE'
        }).then(res => {
            if(res.status != 200) {
                throw new Error(res.statusText);
            }
            return res.json();
        }).then(() => {
            let nextState = this.state.words;
            delete nextState[id];
            setWords(nextState);
        });
    }

    useEffect(() => {
        _get(); 
    })

    const handleDialogToggle = () => {
        setDialog(!dialog);
    }

    const handleValueChange = (e) => {
        let nextState = {};
        nextState[e.target.name] = e.target.value;
        this.setState(nextState);
    }

    const handleSubmit = () => {
        const word = () => {
            setWord(word)
            setWeight(weight)
        }
        handleDialogToggle();
        if (!word.word && !word.weight) {
            return;
        }
        _post(word);
    }

    const handleDelete = (id) => {
        _delete(id);
    }


        return (
            <div>
                {Object.keys(words).map(id => {
                    const word = words[id];
                    return (
                        <div key={id}>
                            <Card>
                                <CardContent>
                                    <Typography color="textSecondary" gutterBottom>
                                        가중치: {word.weight}
                                    </Typography>
                                    <Grid container>
                                        <Grid item xs={6}>
                                            <Typography variant="h5" component="h2">
                                                {word.word}
                                            </Typography>
                                        </Grid>
                                        <Grid item xs={6}>
                                            <Button variant="contained" color="primary" onClick={() => handleDelete(id)}>삭제</Button>
                                        </Grid>
                                    </Grid>
                                </CardContent>
                            </Card>
                            <br />
                        </div>
                    );
                })}
                
                <Dialog open={dialog} onClose={handleDialogToggle}>
                    <DialogTitle>단어 추가</DialogTitle>
                    <DialogContent>
                        <TextField label="단어" type="text" name="word" value={word} onChange={handleValueChange}/><br/>
                        <TextField label="가중치" type="number" name="weight" value={weight} onChange={handleValueChange}/><br/>
                    </DialogContent>
                    <DialogActions>
                        <Button variant="contained" color="primary" onClick={handleSubmit}>추가</Button>
                        <Button variant="outlined" color="primary" onClick={handleDialogToggle}>닫기</Button>
                    </DialogActions>
                </Dialog>
            </div>
        );
}

export default Words;